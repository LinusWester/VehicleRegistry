#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VehicleRegistry.Repository
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VehicleRegisterDatabase")]
	public partial class AzureVehicleDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertVehicle(Vehicle instance);
    partial void UpdateVehicle(Vehicle instance);
    partial void DeleteVehicle(Vehicle instance);
    partial void InsertVehicleService(VehicleService instance);
    partial void UpdateVehicleService(VehicleService instance);
    partial void DeleteVehicleService(VehicleService instance);
    #endregion
		
		public AzureVehicleDatabaseDataContext() : 
				base(global::Repository.Properties.Settings.Default.VehicleRegisterDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AzureVehicleDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AzureVehicleDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AzureVehicleDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AzureVehicleDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Vehicle> Vehicles
		{
			get
			{
				return this.GetTable<Vehicle>();
			}
		}
		
		public System.Data.Linq.Table<VehicleService> VehicleServices
		{
			get
			{
				return this.GetTable<VehicleService>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private bool _Authorized;
		
		private string _UserPassword;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnAuthorizedChanging(bool value);
    partial void OnAuthorizedChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    #endregion
		
		public Account()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Authorized", DbType="Bit NOT NULL")]
		public bool Authorized
		{
			get
			{
				return this._Authorized;
			}
			set
			{
				if ((this._Authorized != value))
				{
					this.OnAuthorizedChanging(value);
					this.SendPropertyChanging();
					this._Authorized = value;
					this.SendPropertyChanged("Authorized");
					this.OnAuthorizedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vehicle")]
	public partial class Vehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RegNumber;
		
		private string _Make;
		
		private string _Model;
		
		private string _VehicleType;
		
		private double _VehicleWeight;
		
		private System.Nullable<System.DateTime> _FirstDateInTraffic;
		
		private bool _IsRegistered;
		
		private EntitySet<VehicleService> _VehicleServices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegNumberChanging(string value);
    partial void OnRegNumberChanged();
    partial void OnMakeChanging(string value);
    partial void OnMakeChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnVehicleTypeChanging(string value);
    partial void OnVehicleTypeChanged();
    partial void OnVehicleWeightChanging(double value);
    partial void OnVehicleWeightChanged();
    partial void OnFirstDateInTrafficChanging(System.Nullable<System.DateTime> value);
    partial void OnFirstDateInTrafficChanged();
    partial void OnIsRegisteredChanging(bool value);
    partial void OnIsRegisteredChanged();
    #endregion
		
		public Vehicle()
		{
			this._VehicleServices = new EntitySet<VehicleService>(new Action<VehicleService>(this.attach_VehicleServices), new Action<VehicleService>(this.detach_VehicleServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNumber", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RegNumber
		{
			get
			{
				return this._RegNumber;
			}
			set
			{
				if ((this._RegNumber != value))
				{
					this.OnRegNumberChanging(value);
					this.SendPropertyChanging();
					this._RegNumber = value;
					this.SendPropertyChanged("RegNumber");
					this.OnRegNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Make", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Make
		{
			get
			{
				return this._Make;
			}
			set
			{
				if ((this._Make != value))
				{
					this.OnMakeChanging(value);
					this.SendPropertyChanging();
					this._Make = value;
					this.SendPropertyChanged("Make");
					this.OnMakeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string VehicleType
		{
			get
			{
				return this._VehicleType;
			}
			set
			{
				if ((this._VehicleType != value))
				{
					this.OnVehicleTypeChanging(value);
					this.SendPropertyChanging();
					this._VehicleType = value;
					this.SendPropertyChanged("VehicleType");
					this.OnVehicleTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleWeight", DbType="Float NOT NULL", CanBeNull=false)]
		public double VehicleWeight
		{
			get
			{
				return this._VehicleWeight;
			}
			set
			{
				if ((this._VehicleWeight != value))
				{
					this.OnVehicleWeightChanging(value);
					this.SendPropertyChanging();
					this._VehicleWeight = value;
					this.SendPropertyChanged("VehicleWeight");
					this.OnVehicleWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstDateInTraffic", DbType="DateTime")]
		public System.Nullable<System.DateTime> FirstDateInTraffic
		{
			get
			{
				return this._FirstDateInTraffic;
			}
			set
			{
				if ((this._FirstDateInTraffic != value))
				{
					this.OnFirstDateInTrafficChanging(value);
					this.SendPropertyChanging();
					this._FirstDateInTraffic = value;
					this.SendPropertyChanged("FirstDateInTraffic");
					this.OnFirstDateInTrafficChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRegistered", DbType="Bit NOT NULL")]
		public bool IsRegistered
		{
			get
			{
				return this._IsRegistered;
			}
			set
			{
				if ((this._IsRegistered != value))
				{
					this.OnIsRegisteredChanging(value);
					this.SendPropertyChanging();
					this._IsRegistered = value;
					this.SendPropertyChanged("IsRegistered");
					this.OnIsRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicle_VehicleService", Storage="_VehicleServices", ThisKey="RegNumber", OtherKey="RegNumber")]
		public EntitySet<VehicleService> VehicleServices
		{
			get
			{
				return this._VehicleServices;
			}
			set
			{
				this._VehicleServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VehicleServices(VehicleService entity)
		{
			this.SendPropertyChanging();
			entity.Vehicle = this;
		}
		
		private void detach_VehicleServices(VehicleService entity)
		{
			this.SendPropertyChanging();
			entity.Vehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleService")]
	public partial class VehicleService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private bool _IsServiceBooked;
		
		private System.DateTime _ServiceDate;
		
		private string _ServiceHistory;
		
		private string _RegNumber;
		
		private EntityRef<Vehicle> _Vehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIsServiceBookedChanging(bool value);
    partial void OnIsServiceBookedChanged();
    partial void OnServiceDateChanging(System.DateTime value);
    partial void OnServiceDateChanged();
    partial void OnServiceHistoryChanging(string value);
    partial void OnServiceHistoryChanged();
    partial void OnRegNumberChanging(string value);
    partial void OnRegNumberChanged();
    #endregion
		
		public VehicleService()
		{
			this._Vehicle = default(EntityRef<Vehicle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsServiceBooked", DbType="Bit NOT NULL")]
		public bool IsServiceBooked
		{
			get
			{
				return this._IsServiceBooked;
			}
			set
			{
				if ((this._IsServiceBooked != value))
				{
					this.OnIsServiceBookedChanging(value);
					this.SendPropertyChanging();
					this._IsServiceBooked = value;
					this.SendPropertyChanged("IsServiceBooked");
					this.OnIsServiceBookedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceDate", DbType="DateTime NOT NULL")]
		public System.DateTime ServiceDate
		{
			get
			{
				return this._ServiceDate;
			}
			set
			{
				if ((this._ServiceDate != value))
				{
					this.OnServiceDateChanging(value);
					this.SendPropertyChanging();
					this._ServiceDate = value;
					this.SendPropertyChanged("ServiceDate");
					this.OnServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceHistory", DbType="VarChar(255)")]
		public string ServiceHistory
		{
			get
			{
				return this._ServiceHistory;
			}
			set
			{
				if ((this._ServiceHistory != value))
				{
					this.OnServiceHistoryChanging(value);
					this.SendPropertyChanging();
					this._ServiceHistory = value;
					this.SendPropertyChanged("ServiceHistory");
					this.OnServiceHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNumber", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string RegNumber
		{
			get
			{
				return this._RegNumber;
			}
			set
			{
				if ((this._RegNumber != value))
				{
					if (this._Vehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegNumberChanging(value);
					this.SendPropertyChanging();
					this._RegNumber = value;
					this.SendPropertyChanged("RegNumber");
					this.OnRegNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicle_VehicleService", Storage="_Vehicle", ThisKey="RegNumber", OtherKey="RegNumber", IsForeignKey=true)]
		public Vehicle Vehicle
		{
			get
			{
				return this._Vehicle.Entity;
			}
			set
			{
				Vehicle previousValue = this._Vehicle.Entity;
				if (((previousValue != value) 
							|| (this._Vehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vehicle.Entity = null;
						previousValue.VehicleServices.Remove(this);
					}
					this._Vehicle.Entity = value;
					if ((value != null))
					{
						value.VehicleServices.Add(this);
						this._RegNumber = value.RegNumber;
					}
					else
					{
						this._RegNumber = default(string);
					}
					this.SendPropertyChanged("Vehicle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
